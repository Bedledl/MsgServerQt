name: Builds the code and runs checks on it

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_TYPE_LC: release
  CONAN_CACHE_SAVE_FILE: conan_cache_save.tgz

jobs:
  checks-without-building:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Run Clang Format Check
      uses: jidicula/clang-format-action@v4.11.0
      with:
        clang-format-version: '14'

    - if: success()
      name: Print success
      run: echo "Clang format check passed"

  build-cache:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Cache conan installed packages
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-deps
      with:
        path: ${{github.workspace}}/${{ env.CONAN_CACHE_SAVE_FILE}}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.BUILD_TYPE_LC }}-${{ hashFiles('conanfile.py') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.BUILD_TYPE_LC }}-
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-


    - if: ${{ steps.cache-deps.outputs.cache-hit != 'true' }}
      name: Print loading cache unsuccessful
      continue-on-error: true
      run: echo "Could not restore cache"

    - if: ${{ steps.cache-deps.outputs.cache-hit == 'true' }}
      name: Print loading cache successful
      continue-on-error: true
      run: echo "Could restore cache"


    - name: Install Conan
      if: ${{ steps.cache-deps.outputs.cache-hit != 'true' }}
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Conan version
      if: ${{ steps.cache-deps.outputs.cache-hit != 'true' }}
      run: echo "${{ steps.conan.outputs.version }}"

    - name: Conan install Linux x86_64 default profile
      if: ${{ steps.cache-deps.outputs.cache-hit != 'true' }}
      run: conan config install ${{github.workspace}}/conan2-config/

    - name: Print conan profiles
      if: ${{ steps.cache-deps.outputs.cache-hit != 'true' }}
      run: conan profile list

    - name: Build dependencies
      if: ${{ steps.cache-deps.outputs.cache-hit != 'true' }}
      run: conan install -pr:a defaultLinux --output-folder=build --build=missing -s build_type=${{ env.BUILD_TYPE }} -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True .

    - if: ${{ steps.cache-deps.outputs.cache-hit != 'true' }}
      name: Build compressed conan cache to be stored by the Github action cache
      run: conan cache save "*/*:*" --file=${{github.workspace}}/${{ env.CONAN_CACHE_SAVE_FILE}}

  build-with-checks:
    runs-on: ubuntu-latest
    needs: build-cache

    steps:
    - uses: actions/checkout@v3

    - name: Clone own modified clang tidy action
      run: git clone https://github.com/Bedledl/action-clang-tidy.git

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"

    - name: Conan install Linux x86_64 default profile
      run: conan config install ${{github.workspace}}/conan2-config/

    - name: Print conan profiles
      run: conan profile list

    - name: Cache conan installed packages
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-deps
      with:
        path: ${{github.workspace}}/${{ env.CONAN_CACHE_SAVE_FILE}}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.BUILD_TYPE_LC }}-${{ hashFiles('conanfile.py') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.BUILD_TYPE_LC }}-
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - if: ${{ steps.cache-deps.outputs.cache-hit != 'true' }}
      name: Print loading cache unsuccessful
      run: echo "Could not restore cache" && exit 1

    - if: ${{ steps.cache-deps.outputs.cache-hit == 'true' }}
      name: Print loading cache successful
      run: echo "Could restore cache"

    - if: ${{ steps.cache-deps.outputs.cache-hit == 'true' }}
      name: Restore conan cache from compressed file
      run: conan cache restore ${{github.workspace}}/${{ env.CONAN_CACHE_SAVE_FILE}}

    - name: Install dependencies and build program
      run: conan build -pr:a defaultLinux --output-folder=build --build=missing -s build_type=${{ env.BUILD_TYPE }} -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True .

    - name: Run clang-tidy
      uses: ./action-clang-tidy
      with:
        scandir: '.'
        builddir: 'build/build/${{ env.BUILD_TYPE }}'
        excludedirs: 'CMakeModules,CMakeFiles,build'
        extensions: 'c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx'
        useexistingbuild: true
      continue-on-error: true

    - name: Build and test this project
      run: ctest --preset conan-${{ env.BUILD_TYPE_LC }}

    - name: Generate a code coverage report
      uses: threeal/gcovr-action@v1.0.0
      with:
        xml-out: coverage.xml
        excludes: |
          build/*
